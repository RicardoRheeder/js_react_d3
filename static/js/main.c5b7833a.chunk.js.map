{"version":3,"sources":["components/Preloader.js","DataHandling.js","components/CountyMap/County.js","components/CountyMap/CountyMap.js","components/Histogram/Axis.js","components/D3blackbox.js","components/Histogram/Histogram.js","components/Histogram/index.js","components/Meta/USStatesMap.js","components/Meta/Title.js","components/Meta/Description.js","components/Meta/GraphDescription.js","components/MedianLine.js","components/Controls/Toggle.js","components/Controls/ControlRow.js","components/Controls/index.js","App.js","index.js","assets/preloading.png"],"names":["Preloader","react_default","a","createElement","className","src","PreloaderImg","style","width","role","cleanIncomes","d","countyName","USstate","medianIncome","Number","lowerBound","upperBound","dateParse","d3","cleanSalary","employer","submit_date","start_date","case_status","job_title","clean_job_title","base_salary","city","county","countyID","cleanUSStateName","code","id","name","ChoroplethColors","_","reverse","County","nextProps","nextState","_this$props","this","props","zoom","value","_this$props2","geoPath","feature","quantize","color","fill","title","Component","CountyMap","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","projection","scale","range","updateD3","newProps","translate","height","usTopoJson","us","statePaths","topojson","objects","states","features","find","USstateNames","centroid","values","domain","_this2","statesMesh","b","counties","countyValueMap","fromPairs","map","transform","concat","x","y","CountyMap_County","key","stroke","strokeLinejoin","D3render","Axis","axis","tickFormat","ticks","data","length","refs","anchor","_React$Component","Blackbox","apply","arguments","inherits","createClass","ref","React","HistogramBar","_ref","percent","label","toFixed","replace","textAnchor","Histogram","histogram","widthScale","yScale","thresholds","bins","bars","counts","axisMargin","x1","bottomMargin","bar","x0","Histogram_HistogramBar","makeBar","bind","Histogram_Axis","USStatesMap","AL","AK","AS","AZ","AR","CA","CO","CT","DE","DC","FM","FL","GA","GU","HI","ID","IL","IN","IA","KS","KY","LA","ME","MH","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","MP","OH","OK","OR","PW","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","Title","mean","format","d3mean","yearsFragment","USstateFragment","jobTitleFragment","stateFragment","year","filteredBy","toUpperCase","_this$props$filteredB","jobTitle","scaleLinear","d3extent","Description","undefined","allData","filter","getFullYear","deviation","d3deviation","UStateFragment","previousYearFragment","countyFragment","fragment","lastYear","allDataForYear","allDataForJobTitle","allDataForUSstate","Math","abs","byCounty","groupBy","medians","medianIncomesByCounty","ordered","sortBy","keys","items","best","countyMedian","byCity","S","titleCase","s","jobFragment","yearFragment","href","GraphDescription","MedianLine","median","line","medianLabel","Toggle","event","onClick","handleClick","ControlRow","picked","newState","toggleValues","state","mapValues","updateDataFilter","setState","toggles","toggleNames","zipObject","makePick","capitalize","Controls_Toggle","_addToggle","Controls","yearFilter","jobTitleFilter","USstateFilter","_window$location$hash","window","location","hash","split","_window$location$hash2","slicedToArray","updateYearFilter","updateUSstateFilter","updateJobTitleFilter","reset","reportUpdateUpTheChain","filters","join","isEqual","years","Set","jobTitles","USstates","Controls_ControlRow","Array","from","App","techSalaries","countyNames","medianIncomes","salariesFilter","callback","noop","defer","await","error","medianIncomesMap","forEach","isNull","medianIncomesByUSState","loadAllData","techSalariesMap","medianHousehold","salaries","_this$state","changedSalaries","changedFilters","some","k","_this3","components_Preloader","filteredSalaries","filteredSalariesMap","countyValues","countyValue","Meta_Title","Meta_Description","Meta_GraphDescription","components_CountyMap_CountyMap","components_Histogram","components_MedianLine","components_Controls","ReactDOM","render","src_App_0","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c5b7833a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport PreloaderImg from \"../assets/preloading.png\";\r\n\r\nconst Preloader = () => (\r\n  <div className=\"App container\">\r\n    <h1>The average H1B in tech pays $86,164/year</h1>\r\n    <p className=\"lead\">\r\n      Since 2012 the US tech industry has sponsored 176,075 H1B work visas. Most\r\n      of them paid <b>$60,660 to $111,668</b> per year (1 standard deviation).{\" \"}\r\n      <span>\r\n        The best city for an H1B is <b>Kirkland, WA</b> with an average\r\n        individual salary <b>$39,465 above local household median</b>. Median\r\n        household salary is a good proxy for cost of living in an area.\r\n      </span>\r\n    </p>\r\n    <img src={PreloaderImg} style={{ width: \"100%\" }} role=\"presentation\" />\r\n    <h2 className=\"text-center\">Loading data ...</h2>\r\n  </div>\r\n);\r\n\r\nexport default Preloader;\r\n","import * as d3 from \"d3\";\r\nimport _ from \"lodash\";\r\n\r\nconst cleanIncomes = d => ({\r\n  countyName: d[\"Name\"],\r\n  USstate: d[\"State\"],\r\n  medianIncome: Number(d[\"Median Household Income\"]),\r\n  lowerBound: Number(d[\"90% CI Lower Bound\"]),\r\n  upperBound: Number(d[\"90% CI Upper Bound\"])\r\n});\r\n\r\nconst dateParse = d3.timeParse(\"%m/%d/%Y\");\r\n\r\nconst cleanSalary = d => {\r\n  if (!d[\"base salary\"] || Number(d[\"base salary\"]) > 300000) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    employer: d.employer,\r\n    submit_date: dateParse(d[\"submit date\"]),\r\n    start_date: dateParse(d[\"start date\"]),\r\n    case_status: d[\"case status\"],\r\n    job_title: d[\"job title\"],\r\n    clean_job_title: d[\"job title\"],\r\n    base_salary: Number(d[\"base salary\"]),\r\n    city: d[\"city\"],\r\n    USstate: d[\"state\"],\r\n    county: d[\"county\"],\r\n    countyID: d[\"countyID\"]\r\n  };\r\n};\r\n\r\nconst cleanUSStateName = d => ({\r\n  code: d.code,\r\n  id: Number(d.id),\r\n  name: d.name\r\n});\r\n\r\nexport const loadAllData = (callback = _.noop) => {\r\n  d3.queue()\r\n    .defer(d3.json, \"data/us.json\")\r\n    .defer(d3.csv, \"data/us-county-names-normalized.csv\")\r\n    .defer(d3.csv, \"data/county-median-incomes.csv\", cleanIncomes)\r\n    .defer(d3.csv, \"data/h1bs-2012-2016.csv\", cleanSalary)\r\n    .defer(d3.tsv, \"data/us-state-names.tsv\", cleanUSStateName)\r\n    .await(\r\n      (error, us, countyNames, medianIncomes, techSalaries, USstateNames) => {\r\n        countyNames = countyNames.map(({ id, name }) => ({\r\n          id: Number(id),\r\n          name: name\r\n        }));\r\n\r\n        let medianIncomesMap = {};\r\n\r\n        medianIncomes\r\n          .filter(d => _.find(countyNames, { name: d[\"countyName\"] }))\r\n          .forEach(d => {\r\n            d[\"countyID\"] = _.find(countyNames, { name: d[\"countyName\"] }).id;\r\n            medianIncomesMap[d.countyID] = d;\r\n          });\r\n\r\n        techSalaries = techSalaries.filter(d => !_.isNull(d));\r\n\r\n        callback({\r\n          usTopoJson: us,\r\n          countyNames: countyNames,\r\n          medianIncomes: medianIncomesMap,\r\n          medianIncomesByCounty: _.groupBy(medianIncomes, \"countyName\"),\r\n          medianIncomesByUSState: _.groupBy(medianIncomes, \"USstate\"),\r\n          techSalaries: techSalaries,\r\n          USstateNames: USstateNames\r\n        });\r\n      }\r\n    );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nconst ChoroplethColors = _.reverse([\r\n  \"rgb(247,251,255)\",\r\n  \"rgb(222,235,247)\",\r\n  \"rgb(198,219,239)\",\r\n  \"rgb(158,202,225)\",\r\n  \"rgb(107,174,214)\",\r\n  \"rgb(66,146,198)\",\r\n  \"rgb(33,113,181)\",\r\n  \"rgb(8,81,156)\",\r\n  \"rgb(8,48,107)\"\r\n]);\r\n\r\nconst BlankColor = \"rgb(240,240,240)\";\r\n\r\n// Combine array of colors and quantize scale to pick fill color\r\n// Return a <path> element\r\nclass County extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    const { zoom, value } = this.props;\r\n\r\n    return zoom !== nextProps.zoom || value !== nextProps.value;\r\n  }\r\n\r\n  render() {\r\n    const { value, geoPath, feature, quantize } = this.props;\r\n\r\n    let color = BlankColor;\r\n\r\n    if (value) {\r\n      color = ChoroplethColors[quantize(value)];\r\n    }\r\n\r\n    return (\r\n      <path d={geoPath(feature)} style={{ fill: color }} title={feature.id} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default County;\r\n","import React, { Component } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport * as topojson from \"topojson\";\r\nimport _ from \"lodash\";\r\n\r\nimport County from \"./County\";\r\n\r\nclass CountyMap extends Component {\r\n  // Setup default D3 objects\r\n  // projection - defines our geo projection, how the map looks\r\n  // geoPath - calculates d attribute of <path> so it looks like a map\r\n  // quantize - threshold scale with 9 buckets\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.projection = d3.geoAlbersUsa().scale(1280);\r\n    this.geoPath = d3.geoPath().projection(this.projection);\r\n    this.quantize = d3.scaleQuantize().range(d3.range(9));\r\n\r\n    this.updateD3(props);\r\n  }\r\n\r\n  // update D3 objects when props update\r\n  componentWillReceiveProps(newProps) {\r\n    this.updateD3(newProps);\r\n  }\r\n\r\n  // Re-center the geo projection\r\n  // Update domain of quantize scale\r\n  updateD3(props) {\r\n    this.projection\r\n      .translate([props.width / 2, props.height / 2])\r\n      .scale(props.width * 1.3);\r\n\r\n    if (props.zoom && props.usTopoJson) {\r\n      const us = props.usTopoJson,\r\n        statePaths = topojson.feature(us, us.objects.states).features,\r\n        id = _.find(props.USstateNames, { code: props.zoom }).id;\r\n\r\n      this.projection.scale(props.width * 4.5);\r\n\r\n      const centroid = this.geoPath.centroid(_.find(statePaths, { id: id })),\r\n        translate = this.projection.translate();\r\n\r\n      this.projection.translate([\r\n        translate[0] - centroid[0] + props.width / 2,\r\n        translate[1] - centroid[1] + props.height / 2\r\n      ]);\r\n    }\r\n\r\n    if (props.values) {\r\n      this.quantize.domain([\r\n        d3.quantile(props.values, 0.15, d => d.value),\r\n        d3.quantile(props.values, 0.85, d => d.value)\r\n      ]);\r\n    }\r\n  }\r\n\r\n  // If no data, do nothing (we might mount before data loads into props)\r\n  render() {\r\n    if (!this.props.usTopoJson) {\r\n      return null;\r\n    } else {\r\n      // Translate topojson data into geojson data for drawing\r\n      // Prepare a mesh for states and a list of features for counties\r\n      const us = this.props.usTopoJson,\r\n        statesMesh = topojson.mesh(us, us.objects.states, (a, b) => a !== b),\r\n        counties = topojson.feature(us, us.objects.counties).features;\r\n\r\n      const countyValueMap = _.fromPairs(\r\n        this.props.values.map(d => [d.countyID, d.value])\r\n      );\r\n\r\n      // Loop through counties and draw <County> components\r\n      // Add a single <path> for state borders\r\n      return (\r\n        <g transform={`translate(${this.props.x}, ${this.props.y})`}>\r\n          {counties.map(feature => (\r\n            <County\r\n              geoPath={this.geoPath}\r\n              feature={feature}\r\n              zoom={this.props.zoom}\r\n              key={feature.id}\r\n              quantize={this.quantize}\r\n              value={countyValueMap[feature.id]}\r\n            />\r\n          ))}\r\n\r\n          <path\r\n            d={this.geoPath(statesMesh)}\r\n            style={{ fill: \"none\", stroke: \"#fff\", strokeLinejoin: \"round\" }}\r\n          />\r\n        </g>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default CountyMap;\r\n","import * as d3 from \"d3\";\r\nimport D3blackbox from \"../D3blackbox\";\r\n\r\nconst Axis = D3blackbox(function() {\r\n  const axis = d3\r\n    .axisLeft()\r\n    .tickFormat(d => `${d3.format(\".2s\")(d)}`)\r\n    .scale(this.props.scale)\r\n    .ticks(this.props.data.length);\r\n\r\n  d3.select(this.refs.anchor).call(axis);\r\n});\r\n\r\nexport default Axis;\r\n","import React from \"react\";\r\n\r\nexport default function D3blackbox(D3render) {\r\n  return class Blackbox extends React.Component {\r\n    componentDidMount() {\r\n      D3render.call(this);\r\n    }\r\n    componentDidUpdate() {\r\n      D3render.call(this);\r\n    }\r\n\r\n    render() {\r\n      const { x, y } = this.props;\r\n      return <g transform={`translate(${x}, ${y})`} ref=\"anchor\" />;\r\n    }\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nimport Axis from \"./Axis\";\r\n\r\nconst HistogramBar = ({ percent, x, y, width, height }) => {\r\n  let translate = `translate(${x}, ${y})`,\r\n    label = percent.toFixed(0) + \"%\";\r\n\r\n  if (percent < 1) {\r\n    label = percent.toFixed(2) + \"%\";\r\n  }\r\n\r\n  if (width < 20) {\r\n    label = label.replace(\"%\", \"\");\r\n  }\r\n\r\n  if (width < 10) {\r\n    label = \"\";\r\n  }\r\n\r\n  return (\r\n    <g transform={translate} className=\"bar\">\r\n      <rect width={width} height={height - 2} transform=\"translate(0, 1)\" />\r\n      <text textAnchor=\"end\" x={width - 5} y={height / 2 + 3}>\r\n        {label}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nclass Histogram extends Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.histogram = d3.histogram();\r\n    this.widthScale = d3.scaleLinear();\r\n    this.yScale = d3.scaleLinear();\r\n\r\n    this.updateD3(props);\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    this.updateD3(newProps);\r\n  }\r\n\r\n  updateD3(props) {\r\n    this.histogram.thresholds(props.bins).value(props.value);\r\n\r\n    const bars = this.histogram(props.data),\r\n      counts = bars.map(d => d.length);\r\n\r\n    this.widthScale\r\n      .domain([d3.min(counts), d3.max(counts)])\r\n      .range([0, props.width - props.axisMargin]);\r\n\r\n    this.yScale\r\n      .domain([0, d3.max(bars, d => d.x1)])\r\n      .range([0, props.height - props.y - props.bottomMargin]);\r\n  }\r\n\r\n  makeBar(bar) {\r\n    let percent = (bar.length / this.props.data.length) * 100;\r\n\r\n    let props = {\r\n      percent: percent,\r\n      x: this.props.axisMargin,\r\n      y: this.yScale(bar.x0),\r\n      width: this.widthScale(bar.length),\r\n      height: this.yScale(bar.x1 - bar.x0),\r\n      key: \"histogram-bar-\" + bar.x0\r\n    };\r\n\r\n    return <HistogramBar {...props} />;\r\n  }\r\n\r\n  render() {\r\n    const translate = `translate(${this.props.x}, ${this.props.y})`,\r\n      bars = this.histogram(this.props.data);\r\n\r\n    return (\r\n      <g className=\"histogram\" transform={translate}>\r\n        <g className=\"bars\">{bars.map(this.makeBar.bind(this))}</g>\r\n        <Axis\r\n          x={this.props.axisMargin - 3}\r\n          y={0}\r\n          data={bars}\r\n          scale={this.yScale}\r\n        />\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Histogram;\r\n","import Histogram from \"./Histogram\";\r\n\r\nexport default Histogram;\r\n","\r\nexport default {\r\n    \"AL\": \"Alabama\",\r\n    \"AK\": \"Alaska\",\r\n    \"AS\": \"American Samoa\",\r\n    \"AZ\": \"Arizona\",\r\n    \"AR\": \"Arkansas\",\r\n    \"CA\": \"California\",\r\n    \"CO\": \"Colorado\",\r\n    \"CT\": \"Connecticut\",\r\n    \"DE\": \"Delaware\",\r\n    \"DC\": \"District Of Columbia\",\r\n    \"FM\": \"Federated States Of Micronesia\",\r\n    \"FL\": \"Florida\",\r\n    \"GA\": \"Georgia\",\r\n    \"GU\": \"Guam\",\r\n    \"HI\": \"Hawaii\",\r\n    \"ID\": \"Idaho\",\r\n    \"IL\": \"Illinois\",\r\n    \"IN\": \"Indiana\",\r\n    \"IA\": \"Iowa\",\r\n    \"KS\": \"Kansas\",\r\n    \"KY\": \"Kentucky\",\r\n    \"LA\": \"Louisiana\",\r\n    \"ME\": \"Maine\",\r\n    \"MH\": \"Marshall Islands\",\r\n    \"MD\": \"Maryland\",\r\n    \"MA\": \"Massachusetts\",\r\n    \"MI\": \"Michigan\",\r\n    \"MN\": \"Minnesota\",\r\n    \"MS\": \"Mississippi\",\r\n    \"MO\": \"Missouri\",\r\n    \"MT\": \"Montana\",\r\n    \"NE\": \"Nebraska\",\r\n    \"NV\": \"Nevada\",\r\n    \"NH\": \"New Hampshire\",\r\n    \"NJ\": \"New Jersey\",\r\n    \"NM\": \"New Mexico\",\r\n    \"NY\": \"New York\",\r\n    \"NC\": \"North Carolina\",\r\n    \"ND\": \"North Dakota\",\r\n    \"MP\": \"Northern Mariana Islands\",\r\n    \"OH\": \"Ohio\",\r\n    \"OK\": \"Oklahoma\",\r\n    \"OR\": \"Oregon\",\r\n    \"PW\": \"Palau\",\r\n    \"PA\": \"Pennsylvania\",\r\n    \"PR\": \"Puerto Rico\",\r\n    \"RI\": \"Rhode Island\",\r\n    \"SC\": \"South Carolina\",\r\n    \"SD\": \"South Dakota\",\r\n    \"TN\": \"Tennessee\",\r\n    \"TX\": \"Texas\",\r\n    \"UT\": \"Utah\",\r\n    \"VT\": \"Vermont\",\r\n    \"VI\": \"Virgin Islands\",\r\n    \"VA\": \"Virginia\",\r\n    \"WA\": \"Washington\",\r\n    \"WV\": \"West Virginia\",\r\n    \"WI\": \"Wisconsin\",\r\n    \"WY\": \"Wyoming\"\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport { mean as d3mean, extent as d3extent } from \"d3-array\";\r\n\r\nimport USStatesMap from \"./USStatesMap\";\r\n\r\nclass Title extends Component {\r\n  //Describes the selected year\r\n  get yearsFragment() {\r\n    const year = this.props.filteredBy.year;\r\n\r\n    return year === \"*\" ? \"\" : `in ${year}`;\r\n  }\r\n\r\n  // Describes the selected US state\r\n  get USstateFragment() {\r\n    const USstate = this.props.filteredBy.USstate;\r\n\r\n    return USstate === \"*\" ? \"\" : USStatesMap[USstate.toUpperCase()];\r\n  }\r\n\r\n  // Descibes the selected job title\r\n  get jobTitleFragment() {\r\n    const { jobTitle, year } = this.props.filteredBy;\r\n    let title = \"\";\r\n\r\n    if (jobTitle === \"*\") {\r\n      if (year === \"*\") {\r\n        title = \"The average H1B in tech pays\";\r\n      } else {\r\n        title = \"The average tech H1B paid\";\r\n      }\r\n    } else {\r\n      if (jobTitle === \"*\") {\r\n        title = \"H1Bs in tech pay\";\r\n      } else {\r\n        title = `Software ${jobTitle}s on an H1B`;\r\n\r\n        if (year === \"*\") {\r\n          title += \" make\";\r\n        } else {\r\n          title += \" made\";\r\n        }\r\n      }\r\n    }\r\n\r\n    return title;\r\n  }\r\n\r\n  // returns a number formatter\r\n  get format() {\r\n    return scaleLinear()\r\n      .domain(d3extent(this.props.data, d => d.base_salary))\r\n      .tickFormat();\r\n  }\r\n\r\n  render() {\r\n    const mean = this.format(d3mean(this.props.data, d => d.base_salary));\r\n\r\n    let title;\r\n\r\n    if (this.yearsFragment && this.USstateFragment) {\r\n      title = (\r\n        <h2>\r\n          In {this.USstateFragment}, {this.jobTitleFragment} ${mean}/year{\" \"}\r\n          {this.yearsFragment}\r\n        </h2>\r\n      );\r\n    } else {\r\n      title = (\r\n        <h2>\r\n          {this.jobTitleFragment} ${mean}/year{\" \"}\r\n          {this.USstateFragment ? `in ${this.stateFragment}` : \"\"}{\" \"}\r\n          {this.yearsFragment}\r\n        </h2>\r\n      );\r\n    }\r\n\r\n    return title;\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import React, { Component } from \"react\";\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport {\r\n  mean as d3mean,\r\n  extent as d3extent,\r\n  deviation as d3deviation\r\n} from \"d3-array\";\r\nimport _ from \"lodash\";\r\nimport S from \"string\";\r\n\r\nimport USStatesMap from \"./USStatesMap\";\r\n\r\nclass Description extends Component {\r\n  allDataForYear(year, data = this.props.allData) {\r\n    return data.filter(d => d.submit_date.getFullYear() === year);\r\n  }\r\n\r\n  allDataForJobTitle(jobTitle, data = this.props.allData) {\r\n    return data.filter(d => d.clean_job_title === jobTitle);\r\n  }\r\n\r\n  allDataForUSstate(USstate, data = this.props.allData) {\r\n    return data.filter(d => d.USstate === USstate);\r\n  }\r\n\r\n  get yearsFragment() {\r\n    const year = this.props.filteredBy.year;\r\n\r\n    return year === \"*\" ? \"\" : `In ${year}`;\r\n  }\r\n\r\n  get USstateFragment() {\r\n    const USstate = this.props.filteredBy.USstate;\r\n\r\n    return USstate === \"*\" ? \"\" : USStatesMap[USstate.toUpperCase()];\r\n  }\r\n\r\n  get previousYearFragment() {\r\n    const year = this.props.filteredBy.year;\r\n\r\n    let fragment;\r\n\r\n    if (year === \"*\") {\r\n      fragment = \"\";\r\n    } else if (year === 2012) {\r\n      fragment = \"\";\r\n    } else {\r\n      const { USstate, jobTitle } = this.props.filteredBy;\r\n      let lastYear = this.allDataForYear(year - 1);\r\n\r\n      if (jobTitle !== \"*\") {\r\n        lastYear = this.allDataForJobTitle(jobTitle, lastYear);\r\n      }\r\n\r\n      if (USstate !== \"*\") {\r\n        lastYear = this.allDataForUSstate(USstate, lastYear);\r\n      }\r\n\r\n      if (this.props.data.length / lastYear.length > 2) {\r\n        fragment =\r\n          \", \" +\r\n          (this.props.data.length / lastYear.length).toFixed() +\r\n          \" times more than the year before\";\r\n      } else {\r\n        const percent = (\r\n          (1 - lastYear.length / this.props.data.length) *\r\n          100\r\n        ).toFixed();\r\n\r\n        fragment =\r\n          \", \" +\r\n          Math.abs(percent) +\r\n          \"% \" +\r\n          (percent > 0 ? \"more\" : \"less\") +\r\n          \" than the year before\";\r\n      }\r\n    }\r\n\r\n    return fragment;\r\n  }\r\n\r\n  get jobTitleFragment() {\r\n    const jobTitle = this.props.filteredBy.jobTitle;\r\n    let fragment;\r\n\r\n    if (jobTitle === \"*\") {\r\n      fragment = \"H1B work visas\";\r\n    } else {\r\n      if (jobTitle === \"other\") {\r\n        fragment = \"H1B work visas\";\r\n      } else {\r\n        fragment = `H1B work visas for software ${jobTitle}s`;\r\n      }\r\n    }\r\n\r\n    return fragment;\r\n  }\r\n\r\n  get countyFragment() {\r\n    const byCounty = _.groupBy(this.props.data, \"countyID\"),\r\n      medians = this.props.medianIncomesByCounty;\r\n\r\n    let ordered = _.sortBy(\r\n      _.keys(byCounty)\r\n        .map(county => byCounty[county])\r\n        .filter(d => d.length / this.props.data.length > 0.01),\r\n      items =>\r\n        d3mean(items, d => d.base_salary) -\r\n        medians[items[0].countyID][0].medianIncome\r\n    );\r\n\r\n    let best = ordered[ordered.length - 1],\r\n      countyMedian = medians[best[0].countyID][0].medianIncome;\r\n\r\n    const byCity = _.groupBy(best, \"city\");\r\n\r\n    ordered = _.sortBy(\r\n      _.keys(byCity)\r\n        .map(city => byCity[city])\r\n        .filter(d => d.length / best.length > 0.01),\r\n      items => d3mean(items, d => d.base_salary) - countyMedian\r\n    );\r\n\r\n    best = ordered[ordered.length - 1];\r\n\r\n    const city = S(best[0].city).titleCase().s + `, ${best[0].USstate}`,\r\n      mean = d3mean(best, d => d.base_salary);\r\n\r\n    const jobFragment = this.jobTitleFragment\r\n      .replace(\"H1B work visas for\", \"\")\r\n      .replace(\"H1B work visas\", \"\");\r\n\r\n    return (\r\n      <span>\r\n        The best city{\" \"}\r\n        {jobFragment.length ? `for ${jobFragment} on an H1B` : \"for an H1B\"}{\" \"}\r\n        {this.yearFragment ? \"was\" : \"is\"} <b>{city}</b> with an average salary\r\n        ${this.format(mean - countyMedian)} above the local household median.\r\n        Median household income is a good proxy for cost of living in an area.{\" \"}\r\n        <a href=\"https://en.wikipedia.org/wiki/Household_income\">[1]</a>.\r\n      </span>\r\n    );\r\n  }\r\n\r\n  get format() {\r\n    return scaleLinear()\r\n      .domain(d3extent(this.props.data, d => d.base_salary))\r\n      .tickFormat();\r\n  }\r\n\r\n  render() {\r\n    const format = this.format,\r\n      mean = d3mean(this.props.data, d => d.base_salary),\r\n      deviation = d3deviation(this.props.data, d => d.base_salary);\r\n\r\n    return (\r\n      <p className=\"lead\">\r\n        {this.yearsFragment ? this.yearsFragment : \"Since 2012\"} the{\" \"}\r\n        {this.UStateFragment} tech industry{\" \"}\r\n        {this.yearsFragment ? \"sponsored\" : \"has sponsored\"}{\" \"}\r\n        <b>\r\n          {format(this.props.data.length)} {this.jobTitleFragment}\r\n        </b>\r\n        {this.previousYearFragment}. Most of them paid{\" \"}\r\n        <b>\r\n          ${format(mean - deviation)} to ${format(mean + deviation)}\r\n        </b>{\" \"}\r\n        per year. {this.countyFragment}\r\n      </p>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Description;\r\n","import React, { Component } from \"react\";\r\n\r\nclass GraphDescription extends Component {\r\n  get jobTitleFragment() {\r\n    const { jobTitle } = this.props.filteredBy;\r\n    let title;\r\n\r\n    if (jobTitle === \"*\") {\r\n      title = \"in tech\";\r\n    } else {\r\n      if (jobTitle === \"other\") {\r\n        title = \"in tech\";\r\n      } else {\r\n        title = `a Software ${jobTitle}`;\r\n      }\r\n    }\r\n\r\n    return title;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"col-md-6 text-center\">\r\n          <h3>Best places to be {this.jobTitleFragment}</h3>\r\n          <small>\r\n            Darker color means bigger difference between median household salary\r\n            <br />\r\n            and individual tech salary. Gray means lack of tech salary data.\r\n          </small>\r\n        </div>\r\n        <div className=\"col-md-6 text-center\">\r\n          <h3>Salary distribution</h3>\r\n          <small>\r\n            Histogram shows tech salary distribution compared to median\r\n            household income, which is a good proxy for cost of living.\r\n          </small>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GraphDescription;\r\n","import React, { Component } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nclass MedianLine extends Component {\r\n  componentWillMount() {\r\n    this.yScale = d3.scaleLinear();\r\n\r\n    this.updateD3(this.props);\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    this.updateD3(newProps);\r\n  }\r\n\r\n  updateD3(props) {\r\n    this.yScale\r\n      .domain([0, d3.max(props.data, props.value)])\r\n      .range([0, props.height - props.y - props.bottomMargin]);\r\n  }\r\n\r\n  render() {\r\n    const median =\r\n        this.props.median || d3.median(this.props.data, this.props.value),\r\n      line = d3.line()([[0, 5], [this.props.width, 5]]);\r\n\r\n    const translate = `translate(${this.props.x}, ${this.yScale(median)})`,\r\n      medianLabel = `Median Household: $${this.yScale.tickFormat()(median)}`;\r\n\r\n    return (\r\n      <g className=\"mean\" transform={translate}>\r\n        <text x={this.props.width - 5} y=\"0\" textAnchor=\"end\">\r\n          {medianLabel}\r\n        </text>\r\n        <path d={line} />\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MedianLine;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Toggle extends Component {\r\n  handleClick(event) {\r\n    this.props.onClick(this.props.name, !this.props.value);\r\n  }\r\n\r\n  render() {\r\n    let className = \"btn btn-default\";\r\n\r\n    if (this.props.value) {\r\n      className += \" btn-primary\";\r\n    }\r\n\r\n    return (\r\n      <button className={className} onClick={this.handleClick.bind(this)}>\r\n        {this.props.label}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Toggle;\r\n","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nimport Toggle from \"./Toggle\";\r\n\r\nclass ControlRow extends Component {\r\n  makePick(picked, newState) {\r\n    let toggleValues = this.state.toggleValues;\r\n\r\n    toggleValues = _.mapValues(\r\n      toggleValues,\r\n      (value, key) => newState && key == picked\r\n    ); // eslint-disable-line\r\n\r\n    // if newState is false, we want to reset\r\n    this.props.updateDataFilter(picked, !newState);\r\n\r\n    this.setState({ toggleValues: toggleValues });\r\n  }\r\n\r\n  componentWillMount() {\r\n    let toggles = this.props.toggleNames,\r\n      toggleValues = _.zipObject(\r\n        toggles,\r\n        toggles.map(name => name === this.props.picked)\r\n      );\r\n\r\n    this.setState({ toggleValues: toggleValues });\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props.picked !== nextProps.picked) {\r\n      this.makePick(nextProps.picked, true);\r\n    }\r\n  }\r\n\r\n  _addToggle(name) {\r\n    let key = `toggle-${name}`,\r\n      label = name;\r\n\r\n    if (this.props.capitalize) {\r\n      label = label.toUpperCase();\r\n    }\r\n\r\n    return (\r\n      <Toggle\r\n        label={label}\r\n        name={name}\r\n        key={key}\r\n        value={this.state.toggleValues[name]}\r\n        onClick={this.makePick.bind(this)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          {this.props.toggleNames.map(name => this._addToggle(name))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ControlRow;\r\n","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nimport ControlRow from \"./ControlRow\";\r\n\r\nclass Controls extends Component {\r\n  state = {\r\n    yearFilter: () => true,\r\n    jobTitleFilter: () => true,\r\n    USstateFilter: () => true,\r\n    year: \"*\",\r\n    USstate: \"*\",\r\n    jobTitle: \"*\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    let [year, USstate, jobTitle] = window.location.hash\r\n      .replace(\"#\", \"\")\r\n      .split(\"-\");\r\n\r\n    if (year !== \"*\" && year) {\r\n      this.updateYearFilter(Number(year));\r\n    }\r\n    if (USstate !== \"*\" && USstate) {\r\n      this.updateUSstateFilter(USstate);\r\n    }\r\n    if (jobTitle !== \"*\" && jobTitle) {\r\n      this.updateJobTitleFilter(jobTitle);\r\n    }\r\n  }\r\n\r\n  updateYearFilter(year, reset) {\r\n    let filter = d => d.submit_date.getFullYear() === year;\r\n\r\n    if (reset || !year) {\r\n      filter = () => true;\r\n      year = \"*\";\r\n    }\r\n\r\n    this.setState({ yearFilter: filter, year: year });\r\n  }\r\n\r\n  updateJobTitleFilter(title, reset) {\r\n    let filter = d => d.clean_job_title === title;\r\n\r\n    if (reset || !title) {\r\n      filter = () => true;\r\n      title = \"*\";\r\n    }\r\n\r\n    this.setState({ jobTitleFilter: filter, jobTitle: title });\r\n  }\r\n\r\n  updateUSstateFilter(USstate, reset) {\r\n    let filter = d => d.USstate === USstate;\r\n\r\n    if (reset || !USstate) {\r\n      filter = () => true;\r\n      USstate = \"*\";\r\n    }\r\n\r\n    this.setState({ USstateFilter: filter, USstate: USstate });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.reportUpdateUpTheChain();\r\n  }\r\n\r\n  reportUpdateUpTheChain() {\r\n    window.location.hash = [\r\n      this.state.year || \"*\",\r\n      this.state.USstate || \"*\",\r\n      this.state.jobTitle || \"*\"\r\n    ].join(\"-\");\r\n\r\n    this.props.updateDataFilter(\r\n      (filters => {\r\n        return d =>\r\n          filters.yearFilter(d) &&\r\n          filters.jobTitleFilter(d) &&\r\n          filters.USstateFilter(d);\r\n      })(this.state),\r\n      {\r\n        USstate: this.state.USstate,\r\n        year: this.state.year,\r\n        jobTitle: this.state.jobTitle\r\n      }\r\n    );\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return !_.isEqual(this.state, nextState);\r\n  }\r\n\r\n  render() {\r\n    const data = this.props.data;\r\n\r\n    const years = new Set(data.map(d => d.submit_date.getFullYear())),\r\n      jobTitles = new Set(data.map(d => d.clean_job_title)),\r\n      USstates = new Set(data.map(d => d.USstate));\r\n\r\n    return (\r\n      <div>\r\n        <ControlRow\r\n          data={data}\r\n          toggleNames={Array.from(years.values())}\r\n          picked={this.state.year}\r\n          updateDataFilter={this.updateYearFilter.bind(this)}\r\n        />\r\n\r\n        <ControlRow\r\n          data={data}\r\n          toggleNames={Array.from(jobTitles.values())}\r\n          picked={this.state.jobTitle}\r\n          updateDataFilter={this.updateJobTitleFilter.bind(this)}\r\n        />\r\n\r\n        <ControlRow\r\n          data={data}\r\n          toggleNames={Array.from(USstates.values())}\r\n          picked={this.state.USstate}\r\n          updateDataFilter={this.updateUSstateFilter.bind(this)}\r\n          capitalize=\"true\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Controls;\r\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\n\nimport \"./App.css\";\n\nimport Preloader from \"./components/Preloader\";\nimport { loadAllData } from \"./DataHandling\";\n\nimport CountyMap from \"./components/CountyMap\";\nimport Histogram from \"./components/Histogram\";\nimport { Title, Description, GraphDescription } from \"./components/Meta\";\nimport MedianLine from \"./components/MedianLine\";\nimport Controls from \"./components/Controls\";\n\nclass App extends Component {\n  state = {\n    techSalaries: [],\n    countyNames: [],\n    medianIncomes: [],\n    salariesFilter: () => true,\n    filteredBy: {\n      USstate: \"*\",\n      year: \"*\",\n      jobTitle: \"*\"\n    }\n  };\n\n  componentWillMount() {\n    loadAllData(data => this.setState(data));\n  }\n\n  //countyValue method to build an array of counties for our map.\n  countyValue(county, techSalariesMap) {\n    const medianHousehold = this.state.medianIncomes[county.id],\n      salaries = techSalariesMap[county.name];\n    if (!medianHousehold || !salaries) {\n      return null;\n    }\n    const median = d3.median(salaries, d => d.base_salary);\n    return {\n      countyID: county.id,\n      value: median - medianHousehold.medianIncome\n    };\n  }\n\n  updateDataFilter(filter, filteredBy) {\n    this.setState({\n      salariesFilter: filter,\n      filteredBy: filteredBy\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { techSalaries, filteredBy } = this.state;\n\n    const changedSalaries =\n      (techSalaries && techSalaries.length) !==\n      (nextState.techSalaries && nextState.techSalaries.length);\n\n    const changedFilters = Object.keys(filteredBy).some(\n      k => filteredBy[k] !== nextState.filteredBy[k]\n    );\n\n    return changedSalaries || changedFilters;\n  }\n\n  render() {\n    if (this.state.techSalaries.length < 1) {\n      return <Preloader />;\n    }\n\n    const filteredSalaries = this.state.techSalaries.filter(\n        this.state.salariesFilter\n      ),\n      // build a dictionary mapping each countyID to an array of salaries,\n      filteredSalariesMap = _.groupBy(filteredSalaries, \"countyID\"),\n      countyValues = this.state.countyNames\n        .map(county => this.countyValue(county, filteredSalariesMap))\n        .filter(d => !_.isNull(d));\n\n    let zoom = null,\n      medianHousehold = this.state.medianIncomesByUSState[\"US\"][0].medianIncome;\n\n    if (this.state.filteredBy.USstate !== \"*\") {\n      zoom = this.state.filteredBy.USstate;\n      medianHousehold = d3.mean(\n        this.state.medianIncomesByUSState[zoom],\n        d => d.medianIncome\n      );\n    }\n\n    return (\n      <div className=\"App container\">\n        <Title data={filteredSalaries} filteredBy={this.state.filteredBy} />\n        <Description\n          data={filteredSalaries}\n          allData={this.state.techSalaries}\n          medianIncomesByCounty={this.state.medianIncomesByCounty}\n          filteredBy={this.state.filteredBy}\n        />\n        <GraphDescription\n          data={filteredSalaries}\n          filteredBy={this.state.filteredBy}\n        />\n        {/* <h1>Loaded {this.state.techSalaries.length} salaries</h1> */}\n        <svg width=\"1100\" height=\"500\">\n          <CountyMap\n            usTopoJson={this.state.usTopoJson}\n            USstateNames={this.state.USstateNames}\n            values={countyValues}\n            x={0}\n            y={0}\n            width={500}\n            height={500}\n            zoom={zoom}\n          />\n          <rect\n            x=\"500\"\n            y=\"0\"\n            width=\"600\"\n            height=\"500\"\n            style={{ fill: \"white\" }}\n          />\n          <Histogram\n            bins={10}\n            width={500}\n            height={500}\n            x=\"500\"\n            y=\"10\"\n            data={filteredSalaries}\n            axisMargin={83}\n            bottomMargin={5}\n            value={d => d.base_salary}\n          />\n          <MedianLine\n            data={filteredSalaries}\n            x={500}\n            y={10}\n            width={600}\n            height={500}\n            bottomMargin={5}\n            median={medianHousehold}\n            value={d => d.base_salary}\n          />\n        </svg>\n        <Controls\n          data={this.state.techSalaries}\n          updateDataFilter={this.updateDataFilter.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n// import \"bootstrap/dist/css/bootstrap-theme.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/preloading.0e87f8f1.png\";"],"sourceRoot":""}